版本管理
    git只能跟踪文本文件的改动，比如txt文件、网页、程序代码等。
    不幸的是，Microsoft的word格式是二进制格式，因此git无法跟踪word文件的改动。
创建一个Git仓库
    git init
添加文件到Git仓库
    git add添加到缓存区，可以反复多次使用
    git commit把缓存区件提交到当前分支
查看状态
    git status
查看具体修改内容
    git diff
查看提交日志
    git log
    git log --pretty=oneline  只显示一行概要信息
    git log --graph --pretty=oneline 可以看到分支合并图
    git log --graph --pretty=oneline --abbrev-commit 缩短commit id
查看命令日志
    git reflog
回退版本
    git reset --hard HEAD     当前版本
    git reset --hard HEAD^    上个版本
    git reset --hard HEAD^^   上上个版本
    git reset --hard commitID 回退到commitID指向的版本
撤销修改
    git checkout -- file      撤销工作区的修改
    git reset HEAD file       撤销缓存区的修改
删除文件
    git rm file
    git commit -m ""          删除wen件并提交
关联远程库
    git remote add origin git@servername:path/repo-name.git
    git push -u origin master 第一次推送master分支所有内容
    git push origin master    以后推送最新修改
从远程库克隆
    git clone git@github.com:superbaby11/gitskills.git
分支使用
    git branch                查看分支
    git branch <name>         创建分支
    git checkout <name>       切换分支
    git checkout -b <name>    创建+切换分支
    git merge <name>          合并某分支到当前分支
    git branch -d <name>      删除分支
分支策略
    master分支应该是非常稳定的，仅用来发布新版本。
    dev分支是不稳定的，干活都在dev分支上，到某个时候，比如1.0版本发布时，再把分支合并到master上。
    你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
bug分支
    合并只关心分支点之后所做的修改
    git stash                  临时把工作区和暂存区备份一下
    git stash pop              恢复备份前的工作区和暂存区,并删除stash
    git stash list             查看全部的stash
    git stash apply            只恢复工作区和暂存区，不删除stash
    git stash drop             删除stash
